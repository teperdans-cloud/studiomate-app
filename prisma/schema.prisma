// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  artist        Artist?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Artist {
  id                     String                  @id @default(cuid())
  userId                 String                  @unique
  bio                    String?
  location               String?
  website                String?
  instagramHandle        String?
  careerStage            String?
  artisticFocus          String?
  interestedRegions      String?
  awards                 String?                 // JSON string for awards/achievements
  cvData                 String?                 // JSON string for parsed CV data
  cvFileName             String?                 // Original CV filename
  cvUploadedAt           DateTime?               // When CV was uploaded
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  
  // Relations
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworks               Artwork[]
  applications           Application[]
  deadlines              Deadline[]
  notificationPreference NotificationPreference?
  
  @@map("artists")
}

model Artwork {
  id          String   @id @default(cuid())
  title       String
  description String?
  medium      String?
  year        Int?
  dimensions  String?  // e.g., "24x36 inches", "60x90 cm"
  imageUrl    String?
  thumbnailUrl String?
  mediumUrl   String?
  largeUrl    String?
  tags        String?  // JSON array as string
  collections String?  // JSON array as string
  fileSize    Int?     // in bytes
  mimeType    String?  // image/jpeg, image/png, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  artistId    String
  artist      Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("artworks")
}

model Opportunity {
  id           String   @id @default(cuid())
  title        String
  description  String
  organizer    String
  location     String
  type         String
  deadline     DateTime
  link         String?
  eligibility  String
  artTypes     String?
  prize        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  applications Application[]
  deadlines    Deadline[]
  
  @@map("opportunities")
}

model Application {
  id              String   @id @default(cuid())
  status          String   @default("draft")
  artistStatement String?
  coverLetter     String?
  selectedArtworks String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  artistId      String
  opportunityId String
  artist        Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  deadlines     Deadline[]
  
  @@map("applications")
}

model Deadline {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  type        String   // "opportunity", "custom", "application"
  priority    String   @default("medium") // "low", "medium", "high"
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  artistId      String
  opportunityId String?
  applicationId String?
  artist        Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  @@map("deadlines")
}

model NotificationPreference {
  id                    String   @id @default(cuid())
  emailEnabled          Boolean  @default(true)
  reminderIntervals     String   @default("[7,3,1]") // JSON array of days before deadline
  opportunityDeadlines  Boolean  @default(true)
  customDeadlines       Boolean  @default(true)
  applicationDeadlines  Boolean  @default(true)
  googleCalendarEnabled Boolean  @default(false)
  googleCalendarId      String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  artistId String @unique
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}
